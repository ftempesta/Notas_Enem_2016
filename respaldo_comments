#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun  7 23:06:40 2020

@author: matheus
"""


# prediction_regression = regression.predict(X_final_test)
# prediction_regression = prediction_regression*(max_y-min_y)+min_y


# # Select the 30Â° most important columns

# feature_importance = feature_importance.iloc[:30]

# important_columns = (feature_importance["feature"]).to_list()

# # Calculate correlation just in features importante
# dataset_important = dataset[important_columns]

# correlation_feature_important =\
#     dataset_important.corr().unstack().\
#         sort_values().drop_duplicates().reset_index(drop=False)

# correlation_feature_important.columns = ["var1", "var2", "correlation"]

# correlation_feature_important =\
#     correlation_feature_important.sort_values(by=["correlation"],
#                                                       ascending=False).\
#     iloc[1:].reset_index(drop=True)

# # Dataframe of correlation between columns (complete dataset)
# correlation_columns =\
#     dataset.corr().unstack().sort_values().\
#         drop_duplicates().reset_index(drop=False)
# correlation_columns.columns = ["var1", "var2", "correlation"]
# correlation_columns = correlation_columns.sort_values(by=["correlation"],
#                                                       ascending=False).\
#     iloc[1:].reset_index(drop=True)


# # High correlation columns
# high_correlated_columns =\
#     correlation_columns[(correlation_columns['correlation'] > 0.25) |
#                         (correlation_columns['correlation'] < -0.25)]







# correlation_importance_selection1 = pd.merge(feature_importance,
#                                             high_correlated_columns,
#                                             how='outer',
#                                             left_on=['feature'],
#                                             right_on =['var1']).dropna()

# correlation_importance_selection2 = pd.merge(feature_importance,
#                                             high_correlated_columns,
#                                             how='outer',
#                                             left_on=['feature'],
#                                             right_on =['var2']).dropna()

# correlation_importance_selection = pd.merge(correlation_importance_selection1,
#                                             correlation_importance_selection2,
#                                             how='outer',
#                                             left_on=['feature'],
#                                             right_on =['feature']).dropna()


 

# # Aplicar PCA para encontrar componentes principales
# pca = PCA(n_components=100)
# principalComponents = pca.fit_transform(x)




# sns.distplot(dataset['NU_NOTA_MT']);



# #correlation matrix
# corrmat = dataset.corr()
# f, ax = plt.subplots(figsize=(12, 9))
# sns.heatmap(corrmat, vmax=.8, square=True);


# #scatterplot
# sns.set()
# cols = ['NU_NOTA_CN', 'NU_NOTA_MT', 'NU_NOTA_COMP1', 'NU_NOTA_COMP4']
# sns.pairplot(dataset[cols], size = 2.5)
# plt.show();





